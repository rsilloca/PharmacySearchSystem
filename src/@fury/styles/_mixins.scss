@function mat-color($palette, $hue: default, $opacity: null) {
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return mat-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);

  @if (type-of($color) != color) {
    @if ($opacity == null) {
      @return $color;
    }

    // Here is the change from the original function:
    // If the $color resolved to something different from a color, we assume it is a CSS variable
    // in the form of rgba(var(--rgba-css-var),a) and replace the 'a' value.
    @return #{str-slice($color, 0, str-index($color, ',')) + $opacity + ')'};
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

$mat-elevation-color: #523f68;
$mat-elevation-opacity: 0.3;

@function vex-elevation($zValue, $color: $mat-elevation-color, $opacity: $mat-elevation-opacity) {
  @if type-of($zValue) != number or not unitless($zValue) {
    @error '$zValue must be a unitless number';
  }
  @if $zValue < 0 or $zValue > 24 {
    @error '$zValue must be between 0 and 24';
  }

  @return #{map-get(_get-umbra-map($color, $opacity), $zValue)},
  #{map-get(_get-penumbra-map($color, $opacity), $zValue)},
  #{map-get(_get-ambient-map($color, $opacity), $zValue)};
}
